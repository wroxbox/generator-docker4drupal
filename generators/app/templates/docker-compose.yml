version: "2"

services:
  mariadb:
    image: <%= mariaDBImages %>
    container_name: "<%= instance %>_mariadb"
    stop_grace_period: 30s
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: drupal
      MYSQL_USER: drupal
      MYSQL_PASSWORD: drupal
      MYSQL_COLLATION_SERVER: utf8_swedish_ci
#    volumes:
#      - ./mariadb-init:/docker-entrypoint-initdb.d # Place init .sql file(s) here.
#      - /path/to/mariadb/data/on/host:/var/lib/mysql # I want to manage volumes manually.

  php:
    image: <%= phpImage %>
    container_name: "<%= instance %>_php"
    environment:
      PHP_SENDMAIL_PATH: /usr/sbin/sendmail -t -i -S <%= instance %>_mailhog:1025
      PHP_FPM_CLEAR_ENV: "no"
      DB_HOST: <%= instance %>_mariadb
      DB_USER: drupal
      DB_PASSWORD: drupal
      DB_NAME: drupal
      DB_DRIVER: mysql
#      PHP_XDEBUG: 1
#      PHP_XDEBUG_DEFAULT_ENABLE: 1
#      PHP_XDEBUG_REMOTE_CONNECT_BACK: 0
#      PHP_XDEBUG_REMOTE_HOST: "10.254.254.254"
#      PHP_XDEBUG_PROFILER_OUTPUT_DIR: /mnt/files/xdebug/profiler
#      PHP_XDEBUG_TRACE_OUTPUT_DIR: /mnt/files/xdebug/traces
#      PHP_BLACKFIRE: 1
    volumes:
#      - codebase:/var/www/html
# Options for macOS users (http://docs.docker4drupal.org/en/latest/macos)
      - docker-sync-<%= instance %>:/var/www/html:nocopy # Docker-sync
#      - codebase:/var/www/html:cached # User-guided caching
## For Xdebug profiler files
#      - files:/mnt/files

  nginx:
    image: <%= nginxImage %>
    container_name: "<%= instance %>_nginx"
    depends_on:
      - php
    environment:
      NGINX_STATIC_CONTENT_OPEN_FILE_CACHE: "off"
      NGINX_ERROR_LOG_LEVEL: debug
      NGINX_BACKEND_HOST: php
      NGINX_SERVER_ROOT: /var/www/html/web
#      NGINX_DRUPAL_FILE_PROXY_URL: example.com
    volumes:
#      - codebase:/var/www/html
# Options for macOS users (http://docs.docker4drupal.org/en/latest/macos)
      - docker-sync-<%= instance %>:/var/www/html:nocopy # Docker-sync
#      - codebase:/var/www/html:cached # User-guided caching
    labels:
      - 'traefik.backend=<%= instance %>_nginx'
      - 'traefik.port=8081'
      - 'traefik.frontend.rule=Host:<%= domain %>'
    ports:
      - '8081:8081'

<%= redis %>  redis:
<%= redis %>    container_name: "<%= instance %>_redis"  
<%= redis %>    image: wodby/redis:3.2-2.1.3


<%= adminer %>  adminer:
<%= adminer %>    container_name: "<%= instance %>_adminer"  
<%= adminer %>    image: wodby/adminer
<%= adminer %>    environment:
<%= adminer %>       ADMINER_SALT: adminer-salt
<%= adminer %>    labels:
<%= adminer %>       - 'traefik.backend=adminer'
<%= adminer %>       - 'traefik.port=9000'
<%= adminer %>       - 'traefik.frontend.rule=Host:adminer.<%= domain %>'

<%= pma %>  pma:
<%= pma %>    image: phpmyadmin/phpmyadmin
<%= pma %>    container_name: "<%= instance %>_pma"  
<%= pma %>    environment:
<%= pma %>      PMA_HOST: <%= instance %>_mariadb
<%= pma %>      PMA_USER: drupal
<%= pma %>      PMA_PASSWORD: drupal
<%= pma %>      PHP_UPLOAD_MAX_FILESIZE: 1G
<%= pma %>      PHP_MAX_INPUT_VARS: 1G
<%= pma %>    labels:
<%= pma %>      - 'traefik.backend=pma'
<%= pma %>      - 'traefik.port=8082'
<%= pma %>      - 'traefik.frontend.rule=Host:pma.<%= domain %>'

<%= solr %>  solr:
<%= solr %>    container_name: "<%= instance %>_solr"  
<%= solr %>    image: <%= solrVersion%>
<%= solr %>    environment:
<%= solr %>      SOLR_HEAP: 1024m
<%= solr %>    labels:
<%= solr %>      - 'traefik.backend=solr'
<%= solr %>      - 'traefik.port=8983'
<%= solr %>      - 'traefik.frontend.rule=Host:solr.<%= domain %>'

  mailhog:
    image: mailhog/mailhog
    container_name: "<%= instance %>_mailhog"
    labels:
      - 'traefik.backend=<%= instance %>_mailhog'
      - 'traefik.port=8025'
      - 'traefik.frontend.rule=Host:mailhog.<%= domain %>'

#  nodejs-<%= instance %>:
#    image: wodby/drupal-node:1.0-1.0.0
#    environment:
#       NODE_SERVICE_KEY: node-service-key
#    labels:
#      - 'traefik.backend=nodejs'
#      - 'traefik.port=8080'
#      - 'traefik.frontend.rule=Host:nodejs.<%= domain %>'
#    volumes:
#      - ./path/to/your/single-page-app:/app
#    command: sh -c 'npm install && npm run start'

#  node-<%= instance %>:
#    image: node:alpine
#    working_dir: /app
#    labels:
#      - 'traefik.backend=node'
#      - 'traefik.port=3000'
#      - 'traefik.frontend.rule=Host:front.<%= domain %>'
#    expose:
#      - "3000"
#    volumes:
#      - ./path/to/your/single-page-app:/app
#    command: sh -c 'npm install && npm run start'

<%= memcached %>  memcached:
<%= memcached %>    container_name: "<%= instance %>_memcached"
<%= memcached %>    image: wodby/memcached

<%= rsyslog %>  rsyslog:
<%= rsyslog %>    container_name: "<%= instance %>_rsyslog"
<%= rsyslog %>    image: wodby/rsyslog


#  athenapdf-<%= instance %>:
#    image: arachnysdocker/athenapdf-service:2.10.0
#    environment:
#      WEAVER_AUTH_KEY: weaver-auth-key
#      WEAVER_ATHENA_CMD: "athenapdf -S"
#      WEAVER_MAX_WORKERS: 10
#      WEAVER_MAX_CONVERSION_QUEUE: 50
#      WEAVER_WORKER_TIMEOUT: 90
#      WEAVER_CONVERSION_FALLBACK: false

#  blackfire-<%= instance %>:
#    image: blackfire/blackfire
#    environment:
#      BLACKFIRE_SERVER_ID: XXXXX
#      BLACKFIRE_SERVER_TOKEN: YYYYY

#  webgrind-<%= instance %>:
#    image: wodby/webgrind:1.5-1.0.0
#    environment:
#      WEBGRIND_PROFILER_DIR: /mnt/files/xdebug/profiler
#    labels:
#      - 'traefik.backend=webgrind'
#      - 'traefik.port=8080'
#      - 'traefik.frontend.rule=Host:webgrind.<%= domain %>'
#    volumes:
#      - files:/mnt/files

<%= varnish %>  varnish:
<%= varnish %>    image: wodby/drupal-varnish
<%= varnish %>    container_name: "<%= instance %>_varnish"
<%= varnish %>    depends_on:
<%= varnish %>      - nginx
<%= varnish %>    environment:
<%= varnish %>      VARNISH_SECRET: secret
<%= varnish %>      VARNISH_BACKEND_HOST: nginx
<%= varnish %>      VARNISH_BACKEND_PORT: 8082
<%= varnish %>    labels:
<%= varnish %>      - 'traefik.backend=varnish'
<%= varnish %>      - 'traefik.port=6081'
<%= varnish %>      - 'traefik.frontend.rule=Host:varnish.<%= domain %>'

  portainer:
    container_name: "<%= instance %>_portainer"
    image: portainer/portainer
    command: --no-auth -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - 'traefik.backend=portainer'
      - 'traefik.port=9000'
      - 'traefik.frontend.rule=Host:portainer.<%= domain %>'

  traefik:
    image: traefik
    container_name: "<%= instance %>_traefik"
    command: -c /dev/null --web --docker --logLevel=INFO --defaultEntryPoints='http' --defaultEntryPoints='https' --entryPoints="Name:https Address::443 TLS:/certs/cert.pem,/certs/key.pem" --entryPoints="Name:http Address::80"
    ports:
      - '<%= httpPort %>:8080'
      - '<%= httpsPort %>:443'
#      - '8000:80'
#      - '8080:8080' # Dashboard
    volumes:
      - docker-sync-<%= instance %>-certs:/certs:nocopy
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
#  codebase:
## Docker-sync for macOS users
  docker-sync-<%= instance %>:
    external: true
  docker-sync-<%= instance %>-certs:
    external: true
